*pickme.txt*           For Neovim >= 0.8.0          Last change: 2025 April 13

==============================================================================
Table of Contents                                   *pickme-table-of-contents*

1. pickme.nvim                                            |pickme-pickme.nvim|
  - Features                                     |pickme-pickme.nvim-features|
  - Setup                                           |pickme-pickme.nvim-setup|
  - Usage                                           |pickme-pickme.nvim-usage|
  - Available Pickers                   |pickme-pickme.nvim-available-pickers|
  - What’s Next                           |pickme-pickme.nvim-what’s-next|
  - Behind The Code                       |pickme-pickme.nvim-behind-the-code|


==============================================================================
1. pickme.nvim                                            *pickme-pickme.nvim*

A unified interface for multiple Neovim picker plugins.


FEATURES                                         *pickme-pickme.nvim-features*

`pickme.nvim` provides a consistent API to work with different picker plugins
in Neovim. It currently supports:

- Snacks.picker <https://github.com/folke/snacks.nvim/blob/main/docs/picker.md>
- Telescope <https://github.com/nvim-telescope/telescope.nvim>
- fzf-lua <https://github.com/ibhagwan/fzf-lua>


SETUP                                               *pickme-pickme.nvim-setup*


INSTALLATION ~

Using lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    {
      '2KAbhishek/pickme.nvim',
      dependencies = {
        -- Include at least one of these pickers:
        'folke/snacks.nvim', -- For snacks.picker
        -- 'nvim-telescope/telescope.nvim', -- For telescope
        -- 'ibhagwan/fzf-lua', -- For fzf-lua
      }
      opts = {
        picker_provider = 'snacks', -- Default provider
      },
    }
<


USAGE                                               *pickme-pickme.nvim-usage*


CONFIGURATION ~

>lua
    require('pickme').setup({
      -- Choose your preferred picker provider
      picker_provider = 'snacks', -- Options: 'snacks' (default), 'telescope', 'fzf_lua'
    })
<


AVAILABLE PICKERS                       *pickme-pickme.nvim-available-pickers*

All these pickers are available through a unified interface regardless of the
underlying provider:


FILES AND NAVIGATION ~

- `files` - Find files in the current directory
- `git_files` - Find files tracked by Git
- `buffers` - Browse and select open buffers
- `oldfiles` - Browse recently opened files
- `live_grep` - Search for a string in your project (grep)
- `grep_string` - Search for the word under cursor
- `buffer_grep` - Search within the current buffer
- `tags` - Browse ctags


GIT INTEGRATION ~

- `git_branches` - View and checkout git branches
- `git_status` - View files with git status changes
- `git_commits` - Browse git commit history
- `git_stash` - Browse git stash entries


LSP FEATURES ~

- `lsp_references` - Find references to the symbol under cursor
- `lsp_document_symbols` - List symbols in current document
- `lsp_workspace_symbols` - Search through workspace symbols
- `lsp_definitions` - Go to definition of the symbol under cursor
- `lsp_implementations` - Find implementations of the interface under cursor
- `lsp_type_definitions` - Find type definitions
- `diagnostics` - View and navigate diagnostic messages


NEOVIM FUNCTIONALITY ~

- `commands` - Browse available commands
- `help` - Search through help tags
- `marks` - View and jump to marks
- `registers` - View contents of registers
- `keymaps` - Browse configured key mappings
- `highlights` - Browse highlight groups
- `colorschemes` - Preview and apply colorschemes
- `man` - Browse man pages
- `jumplist` - Navigate through jump history
- `quickfix` - Browse quickfix list items
- `treesitter` - Navigate treesitter symbols


HISTORY AND RESUME ~

- `command_history` - View command history
- `search_history` - View search history
- `spell_suggest` - Get spelling suggestions for word under cursor
- `resume` - Resume the last picker


CUSTOM PICKERS ~

- `select_file` - Custom file picker with provided items
- `custom_picker` - Fully customizable picker with custom items and handlers


LUA USAGE ~

>lua
    local pickme = require('pickme')

    -- Basic usage
    pickme.pick('files', { title = 'Find Files' })
    pickme.pick('live_grep', { title = 'Search Text' })

    -- Using custom picker
    pickme.custom_picker({
      title = 'My Custom Picker',
      items = {'item1', 'item2', 'item3'},
      entry_maker = function(item)
        return { display = item, value = item }
      end,
      preview_generator = function(item)
        return "Preview content for " .. item
      end,
      preview_ft = 'markdown',
      selection_handler = function(_, selection)
        print("Selected: " .. selection.value)
      end
    })
<


KEYBINDINGS ~

Example key mappings:

>lua
    local pickme = require('pickme')

    vim.keymap.set('n', '<leader>ff', function() pickme.pick('files', { title = 'Find Files' }) end, { desc = 'Find Files' })
    vim.keymap.set('n', '<leader>fg', function() pickme.pick('live_grep', { title = 'Search Text' }) end, { desc = 'Live Grep' })
    vim.keymap.set('n', '<leader>fb', function() pickme.pick('buffers', { title = 'Buffers' }) end, { desc = 'Buffers' })
    vim.keymap.set('n', '<leader>fh', function() pickme.pick('help', { title = 'Help Tags' }) end, { desc = 'Help Tags' })
    vim.keymap.set('n', '<leader>fc', function() pickme.pick('commands', { title = 'Commands' }) end, { desc = 'Commands' })
    vim.keymap.set('n', '<leader>fd', function() pickme.pick('diagnostics', { title = 'Diagnostics' }) end, { desc = 'Diagnostics' })
<


HELP ~

Run `:help pickme.txt` for more details.


WHAT’S NEXT                               *pickme-pickme.nvim-what’s-next*

Planning to add `<feature/module>`.


TO-DO ~

- Setup repo
- Think real hard
- Start typing


BEHIND THE CODE                           *pickme-pickme.nvim-behind-the-code*


INSPIRATION ~

pickme.nvim was inspired by nvim-plugin-template
<https://github.com/ellisonleao/nvim-plugin-template>, I added some changes on
top to make setting up a new plugin faster.


CHALLENGES/LEARNINGS ~

- The main challenges were `<issue/difficulty>`
- I learned about `<learning/accomplishment>`


TOOLING ~

- dots2k <https://github.com/2kabhishek/dots2k> — Dev Environment
- nvim2k <https://github.com/2kabhishek/nvim2k> — Personalized Editor
- sway2k <https://github.com/2kabhishek/sway2k> — Desktop Environment
- qute2k <https://github.com/2kabhishek/qute2k> — Personalized Browser


MORE INFO ~

- nerdy.nvim <https://github.com/2kabhishek/nerdy.nvim> — Find nerd glyphs easily
- tdo.nvim <https://github.com/2KAbhishek/tdo.nvim> — Fast and simple notes in Neovim
- termim.nvim <https://github.com/2kabhishek/termim.nvim> — Neovim terminal improved
- octohub.nvim <https://github.com/2kabhishek/octohub.nvim> — Github repos in Neovim
- exercism.nvim <https://github.com/2kabhishek/exercism.nvim> — Exercism exercises in Neovim


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
